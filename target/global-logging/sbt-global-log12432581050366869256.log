[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\avolkov\AppData\Local\Temp\idea10.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\avolkov\AppData\Local\Temp\idea10.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (BellSoft Java 11.0.10)
[debug]       Load.loadUnit: plugins took 159.804401ms
[debug]       Load.loadUnit: defsScala took 0.2414ms
[debug] [Loading] Scanning directory C:\Users\avolkov\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\avolkov\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 52.364801 ms
[debug]           Load.resolveProject(global-plugins) took 46.989999ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\avolkov\.sbt\1.0\plugins, plugins: List(<none>))) took 128.6473ms
[debug] [Loading] Done in C:\Users\avolkov\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 178.0248ms
[debug]       Load.loadUnit: cleanEvalClasses took 1.0542ms
[debug]     Load.loadUnit(file:/C:/Users/avolkov/.sbt/1.0/plugins/, ...) took 359.2635ms
[debug]   Load.apply: load took 582.7921ms
[debug]   Load.apply: resolveProjects took 6.0869ms
[debug]   Load.apply: finalTransforms took 75.7506ms
[debug]   Load.apply: config.delegates took 13.402299ms
[debug]   Load.apply: Def.make(settings)... took 1272.1919ms
[debug]   Load.apply: structureIndex took 160.0133ms
[debug]   Load.apply: mkStreams took 2.1511ms
[info] loading global plugins from C:\Users\avolkov\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4489.683ms
[debug]           Load.loadUnit: plugins took 49.9989ms
[debug]           Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\avolkov\git\scala_copy_hdfs\project
[debug]             Load.loadUnit: mkEval took 12.9842ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\avolkov\git\scala_copy_hdfs\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.048601 ms
[info] loading settings for project scala_copy_hdfs-build from assembly.sbt,idea10.sbt ...
[debug]               Load.resolveProject(scala_copy_hdfs-build) took 2.9684ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala_copy_hdfs-build, base: C:\Users\avolkov\git\scala_copy_hdfs\project, plugins: List(<none>))) took 5.624901ms
[debug] [Loading] Done in C:\Users\avolkov\git\scala_copy_hdfs\project, returning: (scala_copy_hdfs-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 268.135301ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.2777ms
[debug]         Load.loadUnit(file:/C:/Users/avolkov/git/scala_copy_hdfs/project/, ...) took 323.787201ms
[debug]       Load.apply: load took 326.946499ms
[debug]       Load.apply: resolveProjects took 0.3763ms
[debug]       Load.apply: finalTransforms took 29.378699ms
[debug]       Load.apply: config.delegates took 0.5723ms
[debug]       Load.apply: Def.make(settings)... took 133.008501ms
[debug]       Load.apply: structureIndex took 56.0147ms
[debug]       Load.apply: mkStreams took 0.0047ms
[info] loading project definition from C:\Users\avolkov\git\scala_copy_hdfs\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1141.247499ms
[debug]     Load.loadUnit: defsScala took 0.003401ms
[debug] [Loading] Scanning directory C:\Users\avolkov\git\scala_copy_hdfs
[debug]       Load.loadUnit: mkEval took 0.378301ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\avolkov\git\scala_copy_hdfs, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.0957 ms
[info] loading settings for project scala_copy_hdfs from build.sbt ...
[debug]         Load.resolveProject(scala_copy_hdfs) took 114.3297ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scala_copy_hdfs, base: C:\Users\avolkov\git\scala_copy_hdfs, plugins: List(<none>))) took 120.8736ms
[debug] [Loading] Done in C:\Users\avolkov\git\scala_copy_hdfs, returning: (scala_copy_hdfs)
[debug]     Load.loadUnit: loadedProjectsRaw took 177.873501ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.4902ms
[debug]   Load.loadUnit(file:/C:/Users/avolkov/git/scala_copy_hdfs/, ...) took 1331.945001ms
[debug] Load.apply: load took 1337.1288ms
[debug] Load.apply: resolveProjects took 0.294401ms
[debug] Load.apply: finalTransforms took 39.131999ms
[debug] Load.apply: config.delegates took 0.2856ms
[debug] Load.apply: Def.make(settings)... took 98.991599ms
[debug] Load.apply: structureIndex took 37.7102ms
[debug] Load.apply: mkStreams took 0.0017ms
[info] set current project to scala_copy_hdfs (in build file:/C:/Users/avolkov/git/scala_copy_hdfs/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49402 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49402, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala_copy_hdfs (in build file:/C:/Users/avolkov/git/scala_copy_hdfs/)
[debug] > Exec(idea-shell, None, None)
